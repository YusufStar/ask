// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(cuid())
  clerkId String @unique
  email   String @unique

  avatar    String?
  firstName String
  lastName  String

  relationShipCode String @unique

  RelationShip   RelationShip? @relation(fields: [relationShipId], references: [id])
  relationShipId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([relationShipCode], name: "idx_users_relation_ship_code")
  @@index([clerkId], name: "idx_users_clerk_id")
  @@index([email], name: "idx_users_email")
  @@map("users")
}

model RelationShip {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  memories Memories[]

  @@map("relation_ships")
}

model Memories {
  id       String   @id @default(cuid())
  content  String
  date     DateTime
  location String?
  images   Assets[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RelationShip   RelationShip? @relation(fields: [relationShipId], references: [id])
  relationShipId String?
}

model Assets {
  id              String @id @default(cuid())
  image_url       String

  width  Int
  height Int

  Memories   Memories? @relation(fields: [memoriesId], references: [id])
  memoriesId String?

  createdAt DateTime @default(now())
}
